<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="$(SolutionDir)Debug\UWP\VkNet.UWP.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VkNet" #>
<#@ import namespace="VkNet.Enums.Filters" #>
using NUnit.Framework;
using VkNet.Enums.Filters;

namespace VkNet.Tests.Enum.SafetyEnums
{
	[TestFixture]
    public class MultivaluedFilterTest
    {

<#
	var safetyEnumTypes = Assembly.GetAssembly(typeof(VkApi))
		.GetTypes()
		.Where(
			t => t.BaseType != null
				&& t.BaseType.Name == typeof(MultivaluedFilter<>).Name
		);
	foreach (var type in safetyEnumTypes.OrderBy(o => o.Name))
	{

#>
		[Test]
        public void <#=type.Name #>Test()
        {
			// get test
<#GenerateEqualsTest(type);#>
			// parse test
<#GenerateParseTest(type);#>
		}

<#
	}
#>
	}
}

<#+

	public void GenerateEqualsTest(Type type)
	{
		foreach (var info in type.GetFields()) {
#>
			Assert.That(<#= type.Name#>.<#= info.Name#>.ToString(), Is.EqualTo("<#= info.GetValue(info).ToString()#>"));
<#+
		}
	}

#>

<#+

	public void GenerateParseTest(Type type)
	{
		foreach (var info in type.GetFields()) {
#>
			Assert.That(<#= type.Name#>.FromJson("<#= info.GetValue(info).ToString()#>"), Is.EqualTo(<#= type.Name#>.<#= info.Name#>));
<#+
		}
	}

#>