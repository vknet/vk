// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY
using VkNet.Enums;

namespace VkNet.Utils
{
	public partial class VkResponse
	{
		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator DocumentTypeEnum(VkResponse response)
		{
			if (response == null)
			{
				return DocumentTypeEnum.Unknown;
			}

			return Utilities.EnumFrom<DocumentTypeEnum>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AddFriendStatus(VkResponse response)
		{
			if (response == null)
			{
				return AddFriendStatus.Unknown;
			}

			return Utilities.EnumFrom<AddFriendStatus>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator WallType(VkResponse response)
		{
			if (response == null)
			{
				return WallType.Off;
			}

			return Utilities.EnumFrom<WallType>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AgeLimit(VkResponse response)
		{
			if (response == null)
			{
				return AgeLimit.Withoutlimit;
			}

			return Utilities.EnumFrom<AgeLimit>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator MemberStatus(VkResponse response)
		{
			if (response == null)
			{
				return MemberStatus.Invited;
			}

			return Utilities.EnumFrom<MemberStatus>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator Attitude(VkResponse response)
		{
			if (response == null)
			{
				return Attitude.Unknown;
			}

			return Utilities.EnumFrom<Attitude>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator BanReason(VkResponse response)
		{
			if (response == null)
			{
				return BanReason.Other;
			}

			return Utilities.EnumFrom<BanReason>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator BirthdayVisibility(VkResponse response)
		{
			if (response == null)
			{
				return BirthdayVisibility.Invisible;
			}

			return Utilities.EnumFrom<BirthdayVisibility>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator DeleteFriendStatus(VkResponse response)
		{
			if (response == null || response[key: "success"] == 0)
			{
				return DeleteFriendStatus.Unknown;
			}

			if (response[key: "in_request_deleted"] != null && response[key: "in_request_deleted"] == 1
				|| response[key: "out_request_deleted"] != null && response[key: "out_request_deleted"] == 1)
			{
				return DeleteFriendStatus.RequestRejected;
			}

			if (response[key: "suggestion_deleted"] != null && response[key: "suggestion_deleted"] == 1)
			{
				return DeleteFriendStatus.RecommendationDeleted;
			}

			if (response[key: "friend_deleted"] != null && response[key: "friend_deleted"] == 1)
			{
				return DeleteFriendStatus.UserIsDeleted;
			}

			return DeleteFriendStatus.Unknown;
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator FriendStatus(VkResponse response)
		{
			if (response == null)
			{
				return FriendStatus.NotFriend;
			}

			return Utilities.EnumFrom<FriendStatus>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator GiftPrivacy(VkResponse response)
		{
			if (response == null)
			{
				return GiftPrivacy.NameHideMessageUser;
			}

			return Utilities.EnumFrom<GiftPrivacy>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator GroupAccess(VkResponse response)
		{
			if (response == null)
			{
				return GroupAccess.Open;
			}

			return Utilities.EnumFrom<GroupAccess>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator LeaderboardTypes(VkResponse response)
		{
			if (response == null)
			{
				return LeaderboardTypes.NotSupported;
			}

			return Utilities.EnumFrom<LeaderboardTypes>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator LifeMain(VkResponse response)
		{
			if (response == null)
			{
				return LifeMain.Unknown;
			}

			return Utilities.EnumFrom<LifeMain>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator MainSection(VkResponse response)
		{
			if (response == null)
			{
				return MainSection.NoSection;
			}

			return Utilities.EnumFrom<MainSection>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator MarketCurrencyId(VkResponse response)
		{
			if (response == null)
			{
				return MarketCurrencyId.Rub;
			}

			return Utilities.EnumFrom<MarketCurrencyId>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator PeopleMain(VkResponse response)
		{
			if (response == null)
			{
				return PeopleMain.Unknown;
			}

			return Utilities.EnumFrom<PeopleMain>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator PoliticalPreferences(VkResponse response)
		{
			if (response == null)
			{
				return PoliticalPreferences.Unknown;
			}

			return Utilities.EnumFrom<PoliticalPreferences>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator ProductAvailability(VkResponse response)
		{
			if (response == null)
			{
				return ProductAvailability.Unavailable;
			}

			return Utilities.EnumFrom<ProductAvailability>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator ProductSort(VkResponse response)
		{
			if (response == null)
			{
				return ProductSort.UserSort;
			}

			return Utilities.EnumFrom<ProductSort>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator RelationType(VkResponse response)
		{
			if (response == null)
			{
				return RelationType.Unknown;
			}

			return Utilities.EnumFrom<RelationType>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator ReportReason(VkResponse response)
		{
			if (response == null)
			{
				return ReportReason.Spam;
			}

			return Utilities.EnumFrom<ReportReason>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator Sex(VkResponse response)
		{
			if (response == null)
			{
				return Sex.Unknown;
			}

			return Utilities.EnumFrom<Sex>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator WallContentAccess(VkResponse response)
		{
			if (response == null)
			{
				return WallContentAccess.Off;
			}

			return Utilities.EnumFrom<WallContentAccess>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AccountStatus(VkResponse response)
		{
			if (response == null)
			{
				return AccountStatus.Inactive;
			}

			return Utilities.EnumFrom<AccountStatus>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response"> Ответ. </param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator CampaignStatus(VkResponse response)
		{
			if (response == null)
			{
				return CampaignStatus.Stopped;
			}

			return Utilities.EnumFrom<CampaignStatus>(value: response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AutoBidding(VkResponse response)
		{
			if (response == null)
			{
				return AutoBidding.Off;
			}

			return Utilities.EnumFrom<AutoBidding>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AdAgeRestriction(VkResponse response)
		{
			if (response == null)
			{
				return AdAgeRestriction.ZeroPlus;
			}

			return Utilities.EnumFrom<AdAgeRestriction>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AdFormat(VkResponse response)
		{
			if (response == null)
			{
				return AdFormat.Public;
			}

			return Utilities.EnumFrom<AdFormat>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator CostType(VkResponse response)
		{
			if (response == null)
			{
				return CostType.Cpc;
			}

			return Utilities.EnumFrom<CostType>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AdStatus(VkResponse response)
		{
			if (response == null)
			{
				return AdStatus.Stopped;
			}

			return Utilities.EnumFrom<AdStatus>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator RepeatVideo(VkResponse response)
		{
			if (response == null)
			{
				return RepeatVideo.NotRepeat;
			}

			return Utilities.EnumFrom<RepeatVideo>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator GoalType(VkResponse response)
		{
			if (response == null)
			{
				return GoalType.Cpc;
			}

			return Utilities.EnumFrom<GoalType>(response);
		}

		/// <summary>
		/// Преобразовать из VkResponse
		/// </summary>
		/// <param name="response">Ответ.</param>
		/// <returns>
		/// Результат преобразования.
		/// </returns>
		public static implicit operator AdIcon(VkResponse response)
		{
			if (response == null)
			{
				return AdIcon.AdIconNo;
			}

			return Utilities.EnumFrom<AdIcon>(response);
		}
	}
}