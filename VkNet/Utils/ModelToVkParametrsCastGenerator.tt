<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
// Autogenerated at <#= DateTime.Now.ToString() #>
// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY

using VkNet.Model.RequestParams;

namespace VkNet.Utils
{
    using System.Collections.Generic;

    partial class VkParameters : Dictionary<string, string>
    {
<#
	var path = Directory.GetParent(Host.ResolvePath("")) + @"\Model\RequestParams";
	List<string> files = Directory.GetFiles(path).Where(s => Path.GetExtension(s) == ".cs").ToList();
	foreach (var directory in Directory.GetDirectories(path))
	{
		files.AddRange(Directory.GetFiles(directory).Where(s => Path.GetExtension(s) == ".cs").ToList());
	}

List<string> types = new List<string>();

	foreach (var file in files)
	{
		var text = File.ReadAllText(file);
		var pattern = @"public\s+(sealed\s+)?struct ([a-zA-Z]+?)\s*(:\s*[a-zA-Z]+)?\s*{";

		var matches = Regex.Matches(text, pattern, RegexOptions.Multiline);
		
		foreach (var match in matches)
		{
			var type = Regex.Replace(match.ToString(), pattern, @"$2", RegexOptions.Multiline);
			if (Regex.IsMatch(text, String.Format(@"static VkParameters ToVkParameters\({0} [a-zA-Z]*?\)", type),
								RegexOptions.Multiline))
				types.Add(type);
		}
	}

	foreach (var type in types.OrderBy(s => s))
		{
#>
		public static implicit operator VkParameters(<#= type #> p)
		{
            return <#= type #>.ToVkParameters(p);
        }
<# } #>

	}
}